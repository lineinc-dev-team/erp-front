# name: Deploy to EC2

# on:
#   push:
#     branches:
#       - dev

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout source
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Login to DockerHub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           push: true
#           tags: kyoungholee/docker-example:latest
#           platforms: linux/amd64
#           build-args: |
#             NEXT_PUBLIC_API_URL=https://dev-erp-api.dooson.it/api/v1

#       - name: SSH to EC2 and deploy
#         uses: appleboy/ssh-action@v1.0.0
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ubuntu
#           key: ${{ secrets.EC2_FRONT_PEM_KEY }}
#           script: |
#             # 1️⃣ 디스크 여유 확보
#             docker system prune -af

#             # 2️⃣ 기존 컨테이너 확인
#             EXISTING=$(docker ps -q -f name=erp-next-front)
#             if [ -z "$EXISTING" ]; then
#               # 최초 배포: 3000번 포트
#               NEW_PORT=3000
#             else
#               # 신규 배포: timestamp 기반 포트
#               NEW_PORT=$((3000 + $(date +%s) % 1000))
#             fi

#             NEW_CONTAINER="erp-next-front-$(date +%s)"

#             # 3️⃣ Docker 이미지 최신화
#             docker pull kyoungholee/docker-example:latest

#             # 4️⃣ 새 컨테이너 실행 (기존 서비스 중단 없이)
#             docker run -d --restart=always -p $NEW_PORT:3000 --name $NEW_CONTAINER kyoungholee/docker-example:latest

#             # 5️⃣ Nginx upstream 파일 경로
#             UPSTREAM_CONF="/etc/nginx/conf.d/erp_upstream.conf"

#             sudo sed -i "s/server 127.0.0.1:[0-9]\+/server 127.0.0.1:$NEW_PORT/" $UPSTREAM_CONF

#             sudo nginx -s reload

#             if [ -n "$EXISTING" ]; then
#               docker stop $EXISTING
#               docker rm $EXISTING
#             fi

#             for img in $(docker images kyoungholee/docker-example --format "{{.ID}}"); do
#               if ! docker ps -q --filter ancestor=$img | grep -q .; then
#                 docker rmi $img
#               fi
#             done

name: Deploy to EC2

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            kyoungholee/docker-example:latest
            kyoungholee/docker-example:${{ github.sha }}
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=https://dev-erp-api.dooson.it/api/v1

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_FRONT_PEM_KEY }}
          script: |
            # 변수 준비
            IMAGE=kyoungholee/docker-example
            TAG=${GITHUB_SHA}
            CONTAINER_NAME="erp-next-front-$(date +%s)"

            # 1️⃣ 디스크 정리
            docker system prune -af

            # 2️⃣ 기존 컨테이너 확인
            EXISTING=$(docker ps -q -f name=erp-next-front)
            if [ -z "$EXISTING" ]; then
              NEW_PORT=3000
            else
              NEW_PORT=$((3000 + $(date +%s) % 1000))
            fi

            # 3️⃣ 새 이미지 pull (commit sha 기반)
            docker pull $IMAGE:$TAG

            # 4️⃣ 새 컨테이너 실행
            docker run -d --restart=always -p $NEW_PORT:3000 --name $CONTAINER_NAME $IMAGE:$TAG

            # 5️⃣ Nginx 설정 업데이트
            UPSTREAM_CONF="/etc/nginx/conf.d/erp_upstream.conf"
            sudo sed -i "s/server 127.0.0.1:[0-9]\+/server 127.0.0.1:$NEW_PORT/" $UPSTREAM_CONF
            sudo nginx -s reload

            # 6️⃣ 기존 컨테이너 종료 및 삭제
            if [ -n "$EXISTING" ]; then
              docker stop $EXISTING
              docker rm $EXISTING
            fi

            # 7️⃣ 사용 안 하는 이미지 정리
            for img in $(docker images $IMAGE --format "{{.Repository}}:{{.Tag}}"); do
              if ! docker ps -q --filter ancestor=$img | grep -q .; then
                docker rmi $img || true
              fi
            done
