name: Deploy to EC2

on:
  push:
    branches:
      - dev

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: kyoungholee/docker-example:latest
          platforms: linux/amd64
          build-args: |
            NEXT_PUBLIC_API_URL=https://dev-erp-api.dooson.it/api/v1

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_FRONT_PEM_KEY }}
          script: |
            # 1️⃣ 디스크 여유 확보
            docker system prune -af

            # 2️⃣ 기존 컨테이너 확인
            EXISTING=$(docker ps -q -f name=erp-next-front)
            if [ -z "$EXISTING" ]; then
              # 최초 배포: 3000번 포트
              NEW_PORT=3000
            else
              # 신규 배포: timestamp 기반 포트
              NEW_PORT=$((3000 + $(date +%s) % 1000))
            fi

            NEW_CONTAINER="erp-next-front-$(date +%s)"

            # 3️⃣ Docker 이미지 최신화
            docker pull kyoungholee/docker-example:latest

            # 4️⃣ 새 컨테이너 실행 (기존 서비스 중단 없이)
            docker run -d --restart=always -p $NEW_PORT:3000 --name $NEW_CONTAINER kyoungholee/docker-example:latest

            # 5️⃣ Nginx upstream 파일 경로
            UPSTREAM_CONF="/etc/nginx/conf.d/erp_upstream.conf"

            # 6️⃣ 새 컨테이너로 upstream 변경 (root 권한 필요)
            echo "upstream erp_frontend { server 127.0.0.1:$NEW_PORT; }" | sudo tee $UPSTREAM_CONF

            # 7️⃣ Nginx reload
            sudo nginx -s reload

            # 8️⃣ 기존 컨테이너 중지 및 삭제
            if [ -n "$EXISTING" ]; then
              docker stop $EXISTING
              docker rm $EXISTING
            fi
